Module 2 – Advanced PHP Excercises

** OOPs Concepts :
 
* Define Object-Oriented Programming (OOP) and its four main principles: Encapsulation, Inheritance, Polymorphism, and Abstraction.

--> Object-Oriented Programming (OOP) is a programming paradigm or style of programming that is based on the concept of "objects." 
- These objects are instances of classes, which are templates or blueprints that define the properties (data) and behaviors (functions or methods) of the objects.
- OOP focuses on organizing code by grouping related data and functions together into objects, which makes the code modular, reusable, and easier to understand and maintain.

1> Encapsulation :
-->  Encapsulation is the bundling of data (attributes) and methods (functions) that operate on the data into a single unit, typically a class. 
- It also involves restricting direct access to some of the object's components to ensure controlled interaction.

2> Inheritance
--> Inheritance is a mechanism where one class (child or subclass) can acquire the properties and methods of another class (parent or superclass). 
- It promotes code reuse and hierarchical classification.

3> Polymorphism
--> Polymorphism allows objects of different classes to be treated as objects of a common superclass. 
- It provides the ability to redefine methods in derived classes.

4> Abstraction
--> Abstraction is the concept of hiding the implementation details of a class and exposing only the essential features through a clear interface.

** class :

* Explain the structure of a class in PHP, including properties and methods.

--> In PHP, a class is a blueprint or template for creating objects. 
- It defines the structure and behavior of the objects by specifying properties (data) and methods (functions). 
- Here's a breakdown of the structure of a class in PHP:
Structure of a Class :

- Class Declaration -
--> A class is declared using the class keyword followed by the name of the class.
- Class names should follow PascalCase (e.g., MyClass).

- Properties (Attributes) -
--> Properties are variables that belong to a class.
- They store the state or data of an object.
- Properties are declared with visibility modifiers: public, protected, or private.
- public: Accessible everywhere.
- protected: Accessible within the class and its subclasses.
- private: Accessible only within the class.

- Methods (Functions) -
--> Methods are functions defined inside a class.
- They define the behavior of objects and can access properties or perform specific actions.
- Methods also use visibility modifiers (public, protected, private).

- Constructor -
--> The constructor is a special method (__construct()) that is called automatically when an object of the class is created.
- It is typically used to initialize properties.

- Accessing Properties and Methods -
--> Use the $this keyword inside a class to refer to the current object's properties or methods.
- Use the '->' operator to access properties or methods from an object.

** Objects :

* What is an object in OOP? Discuss how objects are instantiated from classes in PHP.

--> An object is an instance of a class in Object-Oriented Programming (OOP). 
- While a class is like a blueprint or template that defines the structure and behavior of an entity, an object represents a specific, concrete realization of that class.
- A class describes what an object should look like and what it should do.
- An object is a specific example of a class with actual values for its properties and access to its methods.

1. Define the Class :
- Use the class keyword to define the class with its properties and methods.

ex : class Car {
    public $brand;
    public $color;

    public function drive() {
        echo "The $this->color $this->brand is driving!";
    }
}


2. Create an Object (Instantiation) :
- Use the new keyword followed by the class name to create an object. 
- This allocates memory for the object and returns a reference to it.
ex : $myCar = new Car();

3. Access Properties and Methods :
- Use the '->' operator to access or set properties and call methods of the object.
ex : $myCar->brand = "Toyota";
$myCar->color = "red";
$myCar->drive(); 
// Output: The red Toyota is driving!

** Extends :

* Explain the concept of inheritance in OOP and how it is implemented in PHP.

--> Inheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows one class (called the child class or subclass) to inherit properties and methods from another class (called the parent class or superclass). 
- This enables code reuse and promotes hierarchical relationships between classes.

The child class can:
- Use the methods and properties of the parent class.
- Add its own methods and properties.
- Override methods from the parent class to modify or extend their behavior.

- Inheritance is implemented using the extends keyword. A child class is declared by extending a parent class.
- Extensibility: Add new features or modify behaviors in child classes without changing the parent class.

Example :
Parent Class -
class Animal {
    public $name;

    public function __construct($name) {
        $this->name = $name;
    }

    public function eat() {
        echo "$this->name is eating.";
    }
}

Child Class -
--> The child class Dog inherits from the parent class Animal and can access its properties and methods. The child class can also define its own unique methods.

Example :
class Dog extends Animal {
    public function bark() {
        echo "$this->name is barking.";
    }
}

// Create an instance of the Dog class
$dog = new Dog("Buddy");
$dog->eat();  // Output: Buddy is eating.
$dog->bark(); // Output: Buddy is barking.

1. Single Inheritance: 
--> PHP supports only single inheritance, meaning a class can extend only one parent class.

class A {}
class B extends A {} // Valid
class C extends A, B {} // Invalid

2. Multiple Inheritance Alternative: 
--> Use traits for including functionality from multiple sources.

3. Constructor Inheritance: 
--> The child class does not automatically inherit the parent class constructor unless explicitly invoked using parent::__construct().

** Overloading :

* Discuss method overloading and how it is implemented in PHP.
--> Method overloading is a concept in object-oriented programming where multiple methods with the same name but different parameters exist in a class. However, PHP does not support traditional method overloading like Java or C++ (where methods with the same name but different parameters can be defined). Instead, PHP provides method overloading via the __call() and __callStatic() magic methods.

--> Method Overloading in PHP
- In PHP, method overloading refers to dynamically handling method calls that are not explicitly defined in a class. This is achieved using two magic methods:

- __call($name, $arguments): Handles calls to non-static methods that are not defined in the class.
- __callStatic($name, $arguments): Handles calls to static methods that are not defined in the class.

--> Practical Use Cases of Method Overloading in PHP
- Handling Dynamic Method Calls
- Useful in frameworks like Laravel where methods can be dynamically created.
- Creating Flexible APIs
- Allows a class to handle different method names dynamically without defining them explicitly.
- Implementing Proxy or Wrapper Classes
- Used in database abstraction layers and service locators.

-> Although PHP does not support traditional method overloading, it allows dynamic method calls using the __call() and __callStatic() magic methods. This provides flexibility in handling method calls dynamically, making it useful for building dynamic APIs, proxy classes, and flexible frameworks.

** Abstraction Interface

* Explain the concept of abstraction and the use of interfaces in PHP
--> What is Abstraction in PHP?
- Abstraction refers to hiding implementation details and exposing only the necessary functionalities. It allows developers to focus on what a class should do rather than how it does it.

--> Abstract Classes in PHP
- An abstract class is a class that cannot be instantiated directly. It can contain both abstract methods (methods without implementation) and regular methods (methods with implementation). Child classes must implement all abstract methods.

--> Key Points About Abstract Classes
- Cannot be instantiated directly.
- Can have both abstract and concrete (regular) methods.
- Child classes must implement all abstract methods.
- Used when multiple classes share a common structure but require different implementations.

--> What are Interfaces in PHP?
- An interface in PHP defines a contract that implementing classes must follow. Unlike abstract classes, interfaces cannot contain properties or method implementations—only method declarations.

--> Key Points About Interfaces
- Cannot contain method implementations—only method declarations.
- A class can implement multiple interfaces (unlike abstract classes, which only support single inheritance).
- Helps in achieving loose coupling and polymorphism in PHP.
- Enforces a strict structure for all implementing classes.

--> When to Use Abstract Classes vs. Interfaces?
- Use abstract classes when you have shared behavior that subclasses should inherit.
- Use interfaces when you want to enforce a specific set of methods that multiple, unrelated classes must implement.

** Constructor

* What is a constructor in PHP? Discuss its purpose and how it is used.
--> A constructor in PHP is a special method that is automatically executed when an object of a class is created. It is primarily used to initialize object properties, set up dependencies, or perform any setup tasks required for the object.

--> Purpose of a Constructor
- Automatic Initialization – It initializes object properties when the object is instantiated.
- Code Reusability – Reduces repetitive code by setting default values in one place.
- Dependency Injection – Allows passing dependencies when an object is created.
- Encapsulation of Setup Logic – Ensures necessary setup is done before using an object.

--> Syntax of a Constructor in PHP
- In PHP, a constructor is defined using the __construct() magic method inside a class:

class MyClass {
    public function __construct() {
        echo "Constructor is called automatically!";
    }
}

$obj = new MyClass(); // Instantiating the object triggers the constructor

--> Output:
- Constructor is called automatically!

** Destructor

* Explain the role of a destructor in PHP and when it is called.
--> A destructor in PHP is a special method that is automatically called when an object is destroyed or goes out of scope. It is used to free up resources, close database connections, write log entries, or perform any necessary cleanup operations before the object is removed from memory.

--> Syntax of a Destructor in PHP
- In PHP, a destructor is defined using the __destruct() magic method inside a class:

class MyClass {
    public function __construct() {
        echo "Constructor is called! \n";
    }

    public function __destruct() {
        echo "Destructor is called!";
    }
}

$obj = new MyClass(); // Constructor is automatically executed

--> Output:
Constructor is called!  
Destructor is called!

- The destructor is automatically called when the script ends or when the object is no longer in use.

--> When is a Destructor Called?
- When an object is explicitly unset using unset($object)
- When the script execution ends
- When an object goes out of scope (e.g., inside a function)

** Magic Methods

* Define magic methods in PHP. Discuss commonly used magic methods like __get(), __set(), and __construct().
--> Magic methods in PHP are special functions that begin with a double underscore (__). They allow developers to define how objects should behave in certain situations, such as property access, method invocation, object serialization, and more. These methods are predefined in PHP and are automatically called when specific events occur.

1. __construct() – Constructor Method
The __construct() method is automatically called when an object of a class is instantiated. It is typically used to initialize object properties or perform setup operations.

2. __get() – Property Getter
The __get() method is invoked when an attempt is made to access a non-existent or private property.

3. __set() – Property Setter
The __set() method is triggered when trying to set a value for a non-existent or private property.

Magic methods in PHP provide a flexible way to handle object interactions dynamically. Some of the most commonly used ones include:

__construct() for object initialization.
__get() for handling inaccessible property reads.
__set() for handling inaccessible property writes.

** Scope Resolution
* Explain the scope resolution operator (::) and its use in PHP.
--> The scope resolution operator (::) in PHP is used to access class constants, static properties, and static methods, as well as to refer to parent and overridden methods in object-oriented programming.

Usage of :: in PHP
Accessing Static Properties and Methods
Accessing Constants in a Class
Calling Parent Class Methods (parent::)
Calling a Method from the Current Class (self::)
Accessing Traits (trait::)

** Traits
* Define traits in PHP and their purpose in code reuse
--> A trait in PHP is a mechanism that allows code reuse across multiple classes without using inheritance. Traits are used to avoid limitations of single inheritance by enabling classes to share methods without requiring a strict parent-child relationship.

Purpose of Traits
Traits help in: Code Reusability – Sharing methods across multiple unrelated classes.
- Avoiding Code Duplication – Preventing repetition of common logic.
- Overcoming Single Inheritance Limitation – PHP supports only single inheritance, but traits allow multiple classes to use common functionality.

Traits provide code reuse without inheritance.
-  They help avoid duplicate code in multiple classes.
- Multiple traits can be used in a class.
- Method conflicts can be resolved using insteadof and as.

** Visibility
* Discuss the visibility of properties and methods in PHP (public, private, protected)
--> In PHP, visibility modifiers (public, private, protected) define the accessibility of class properties and methods. They control how data and functions are accessed within the class and by external entities.

1. public (Most Accessible)
Properties and methods declared as public can be accessed from anywhere—inside the class, from derived (child) classes, and from outside the class.
This is the default visibility if no modifier is specified.

2. private (Most Restricted)
Properties and methods declared as private can only be accessed within the same class.
They are not accessible from child classes or outside the class.

3. protected (Accessible Within Class & Inherited Classes)
Properties and methods declared as protected can be accessed within the same class and by child (sub) classes.
They cannot be accessed directly from outside the class.

- Use private for sensitive data (e.g., passwords, financial details).
- Use protected for methods meant to be inherited but not exposed.
- Use public for properties/methods that should be accessible to everyone.

** Type Hinting
* Explain type hinting in PHP and its benefits
--> Type hinting (also known as type declarations) in PHP allows developers to specify the expected data type for function arguments, return values, and class properties. This helps ensure data integrity and reduces runtime errors.
- Type hints were introduced in PHP 5 and improved significantly in PHP 7 and later versions.

Benefits of Type Hinting
- Improves Code Readability – Makes it clear what type of data a function expects.
- Reduces Bugs – Prevents accidental passing of incorrect data types.
- Enhances Code Maintainability – Helps other developers understand function behavior.
- Improves Performance – PHP can optimize execution when it knows data types.
- Enables Better IDE Support – IDEs can provide better auto-completion and error detection.

** Final Keyword
* Discuss the purpose of the final keyword in PHP and how it affects classes and methods
--> The final keyword in PHP is used to prevent further modification of classes and methods. It ensures that a class cannot be extended and a method cannot be overridden in a subclass.

1. final with Classes
When a class is declared as final, it cannot be inherited by any other class.
This is useful when you want to prevent modifications to a class for security, stability, or design reasons.
- Use Case: If a class should not be modified (e.g., a core library class), mark it as final.

2. final with Methods
When a method is declared as final, it cannot be overridden in a subclass.
This ensures that the original method implementation remains unchanged in child classes.
- Use Case: If a method's functionality is critical (e.g., security checks), marking it as final prevents accidental modification.

--> When to Use the final Keyword
- When you want to prevent a class from being extended (e.g., utility/helper classes).
- When you want to protect a method from being modified (e.g., critical security functions).
- When you want to enforce strict control over class behavior in a framework or library.

** Email Security Function
* Explain the importance of email security and common practices to ensure secure email transmission.
--> Email security is crucial because emails often contain sensitive information such as personal details, business data, and confidential communications. Without proper security, emails are vulnerable to threats like phishing, spam, data breaches, and malware attacks.

Why is Email Security Important?
- Prevents Unauthorized Access – Protects emails from hackers and unauthorized users.
- Protects Sensitive Data – Ensures personal, financial, and business information stays secure.
- Mitigates Phishing Attacks – Helps prevent identity theft and fraud.
- Reduces Spam and Malware Risks – Stops malicious emails from infecting systems.
- Ensures Compliance – Meets legal and regulatory requirements (e.g., GDPR, HIPAA).

1. Use Strong Passwords & Multi-Factor Authentication (MFA)
- Create strong, unique passwords for email accounts.
- Enable Multi-Factor Authentication (MFA) for an extra layer of security.

Example:
Instead of using password123, use something like:
Qw7!@9fNpL$z

2. Use Secure Email Protocols
- TLS (Transport Layer Security) – Encrypts emails in transit.
- SSL (Secure Sockets Layer) – Secures connections between email servers.
- PGP (Pretty Good Privacy) / S/MIME (Secure/Multipurpose Internet Mail Extensions) – Encrypts email content.

** File Handling
* Discuss file handling in PHP, including opening, reading, writing, and closing files
--> File handling in PHP allows reading, writing, and manipulating files on a server. PHP provides several functions to create, open, read, write, append, and close files. Proper file handling is essential for data storage, logging, and configuration management.

1. Opening a File (fopen())
To open a file, use the fopen() function, which takes two parameters:

Filename – The name of the file.
Mode – Specifies how the file should be opened (read, write, append, etc.).

2. Reading from a File (fread(), fgets(), file_get_contents())
fread() – Read a Specific Number of Bytes
fgets() – Read Line by Line
file_get_contents() – Read Entire File (Simpler)

3. Writing to a File (fwrite(), file_put_contents())
fwrite() – Write to a File
Append Mode (a)
file_put_contents() – Write (Simpler)
If the file already exists, file_put_contents() will overwrite it.
To append, use the FILE_APPEND flag

4. Closing a File (fclose())
Always close a file after using it to free up system resources.

** Handling Emails
* Explain how to send emails in PHP using the mail() function and the importance of validating email addresses.
--> The mail() function in PHP allows sending emails directly from a script. It is commonly used for contact forms, notifications, and system alerts. However, it has limitations, and modern applications prefer SMTP-based solutions like PHPMailer or SwiftMailer for more reliability.

1. Basic Syntax of mail() Function :
mail(to, subject, message, headers, parameters);
--> Parameters :
to – The recipient's email address.
subject – The email subject.
message – The email body.
headers (Optional) – Additional headers like From, CC, BCC, Reply-To, etc.
parameters (Optional) – Extra parameters like specifying a return path.

2. Sending a Simple Email
Note: The mail() function requires a configured mail server (e.g., Sendmail, Postfix) to work. On localhost, it might not work unless an SMTP server is set up.

** MVC Architecture
* Discuss the Model-View-Controller (MVC) architecture and its advantages in web development.
--> MVC is a design pattern used in web development to separate an application into three interconnected components:

Model – Handles data and business logic.
View – Manages the user interface and presentation.
Controller – Processes user input and interacts with the Model and View.

-->  Components of MVC
1. Model (Data & Business Logic)
The Model handles:
- Database interactions (CRUD operations).
- Business rules and validation.
- Data processing and logic.
Example in Laravel (Model - Post.php)

2. View (User Interface)
The View is responsible for displaying data to users.
- Uses templates (Blade in Laravel).
- Dynamically renders data.
- Separates logic from UI.
Example (View - posts.blade.php)

3. Controller (Handles Requests)
The Controller acts as an intermediary between the Model and the View.
- Receives HTTP requests.
- Calls the Model to fetch/process data.
- Passes data to the View for rendering.
Example (Controller - PostController.php)

--> How MVC Works in Laravel
- User sends a request (e.g., /posts).
- Controller handles the request (fetches data from Model).
- Model retrieves data from the database.
- Controller sends data to View.
- View displays data to the user.

--> Advantages of MVC in Web Development
 1. Separation of Concerns
- Code is modular, making it easier to manage.
- UI (View), Business Logic (Model), and Control Flow (Controller) are separate.

 2. Code Reusability
- Models and controllers can be reused across different parts of the application.

 3. Scalability
- Easy to extend and maintain large applications.

 4. Parallel Development
- Developers can work simultaneously on different components (Model, View, Controller).

 5. Better Organization & Maintainability
- Clean structure makes debugging easier.

** Connection with MySQL Database
* Explain how to connect PHP to a MySQL database using mysqli or PDO
--> To connect PHP with MySQL, we use either:
- mysqli (MySQL Improved) – Procedural & Object-Oriented API.
- PDO (PHP Data Objects) – Supports multiple databases with a single interface.

Connecting with mysqli (MySQL Improved)
1.1 Using mysqli (Procedural Approach)
-> Pros of Procedural mysqli:
- Simple to use for basic applications.
- Not flexible for multiple databases.

1.2 Using mysqli (Object-Oriented Approach)
-> Pros of Object-Oriented mysqli:
- Better structure for large projects.
- Supports prepared statements for security.

2. Connecting with PDO (PHP Data Objects)
PDO supports MySQL, PostgreSQL, SQLite, and more.

3. Pros of PDO:
- Works with multiple databases (MySQL, PostgreSQL, etc.).
- Supports prepared statements (better security).
- Exception handling for better error reporting.

-> mysqli is simpler but limited to MySQL.
-> PDO is more flexible and supports multiple databases.
-> Both support prepared statements for security.

** SQL Injection
* Define SQL injection and its implications on security.
--> SQL Injection (SQLi) is a web security vulnerability that allows attackers to manipulate a website’s database by injecting malicious SQL queries into input fields. This can lead to:
- Unauthorized data access
- Data modification or deletion
- Compromising user credentials
- Gaining administrative access

1. How SQL Injection Works
An attacker injects malicious SQL code into a vulnerable input field, tricking the database into executing unintended commands.

2. Security Implications of SQL Injection
- If not prevented, SQL Injection can lead to:
Data Leakage – Attackers can extract sensitive information (e.g., user credentials).
Data Manipulation – Hackers can modify or delete records.
Unauthorized Access – Attackers can log in as administrators.
Complete Database Takeover – Advanced attacks can grant full database control.

SQL Injection is a critical security threat, but it is easily preventable by:
- Using prepared statements 
- Validating and sanitizing user input
- Limiting database privileges 

** Session and Cookies
* Explain the differences between sessions and cookies in PHP
1. Sessions in PHP
- Stored on the server with a unique session ID.
- Used for sensitive data (e.g., user authentication).
- Expires when the browser is closed or after a set time.
- More secure since data is not stored in the browser.
- Requires session_start() on every page.

2. Cookies in PHP
- Stored in the user's browser as a small text file.
- Used for remembering user preferences, tracking, etc.
- Can persist even after the browser is closed.
- Useful for persistent user settings.
- Less secure (users can modify cookies).

-> Use Sessions for login authentication, storing sensitive data.
-> Use Cookies for remembering user preferences (e.g., "Remember Me" feature).

** File Upload
* Discuss file upload functionality in PHP and its security implications.
--> Uploading files is a common feature in web applications, but it poses security risks if not handled properly.

Implementing File Upload in PHP
Example: Basic File Upload
1. Create an HTML Form (index.php)
<form action="upload.php" method="POST" enctype="multipart/form-data">
    <input type="file" name="file">
    <button type="submit">Upload</button>
</form>

-> Secure File Upload Best Practices 
Restrict allowed file types (MIME type validation).
Rename files to prevent overwriting.
Set file size limits (upload_max_filesize).
Store files outside the web root (/var/www/uploads).
Disable execution of uploaded files (.htaccess block PHP execution).

- File uploads must be handled securely to prevent hacking risks.
- Use strict validation, limit file size, and store uploads outside the public directory.
- Always rename files and restrict execution to avoid code injection.





